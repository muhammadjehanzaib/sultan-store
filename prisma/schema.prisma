generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Inventory {
  id             String   @id @default(cuid())
  productId      String   @unique
  stock          Int      @default(0)
  stockThreshold Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model StockHistory {
  id        String   @id @default(cuid())
  change    Int
  reason    String?
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Product {
  id             String             @id @default(cuid())
  slug           String             @unique
  name_en        String
  name_ar        String
  description_en String?
  description_ar String?
  image          String
  price          Float
  inStock        Boolean            @default(true)
  rating         Float?             @default(0)
  reviews        Int?               @default(0)
  categoryId     String
  createdAt      DateTime           @default(now())
  inventory      Inventory?
  orderItems     OrderItem[]
  productReviews Review[]
  category       Category           @relation(fields: [categoryId], references: [id])
  attributes     ProductAttribute[]
  variants       ProductVariant[]
  stockHistory   StockHistory[]
}

model ProductVariant {
  id              String                  @id @default(cuid())
  productId       String
  sku             String?
  price           Float?
  image           String?
  inStock         Boolean                 @default(true)
  stockQuantity   Int                     @default(0)
  createdAt       DateTime                @default(now())
  product         Product                 @relation(fields: [productId], references: [id])
  attributeValues VariantAttributeValue[]
}

model ProductAttribute {
  id        String           @id @default(cuid())
  productId String
  name      String
  type      String
  values    AttributeValue[]
  product   Product          @relation(fields: [productId], references: [id])
}

model AttributeValue {
  id            String                  @id @default(cuid())
  attributeId   String
  value         String
  label         String?
  hexColor      String?
  priceModifier Float?
  inStock       Boolean                 @default(true)
  imageUrl      String?
  attribute     ProductAttribute        @relation(fields: [attributeId], references: [id])
  variantValues VariantAttributeValue[]
}

model VariantAttributeValue {
  id               String         @id @default(cuid())
  variantId        String
  attributeValueId String
  attributeValue   AttributeValue @relation(fields: [attributeValueId], references: [id], onDelete: Cascade)
  variant          ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([variantId, attributeValueId])
}

model Order {
  id               String      @id @default(cuid())
  customerEmail    String
  customerName     String
  status           String      @default("pending")
  subtotal         Float
  tax              Float       @default(0)
  shipping         Float       @default(0)
  codFee           Float       @default(0)
  total            Float
  billingAddress   Json
  shippingAddress  Json
  paymentMethod    String
  trackingNumber   String?
  trackingProvider String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  items            OrderItem[]
  orderReviews     Review[]
}

model OrderItem {
  id                 String  @id @default(cuid())
  orderId            String
  productId          String
  quantity           Int
  price              Float
  total              Float
  selectedAttributes Json?
  order              Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product            Product @relation(fields: [productId], references: [id])
}

model Category {
  id        String    @id @default(cuid())
  slug      String    @unique
  name_en   String
  name_ar   String
  icon      String?
  createdAt DateTime  @default(now())
  products  Product[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?
  isGuest       Boolean   @default(false)
  role          String    @default("viewer")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  userReviews   Review[]
  notifications Notification[]
  notificationPreferences NotificationPreferences?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Settings {
  id                    String  @id @default(cuid())
  // Tax & Shipping Settings
  taxRate               Float   @default(0.15)   // 15% VAT
  shippingRate          Float   @default(15.0)   // Standard shipping cost
  freeShippingThreshold Float   @default(50.0)   // Free shipping over 50 SAR
  codFee                Float   @default(25.0)   // Cash on Delivery fee
  
  // Business Settings
  businessName          String  @default("SaudiSafety")
  businessEmail         String  @default("support@saudisafety.com")
  businessPhone         String  @default("+966 XXX XXXX")
  businessAddress       String  @default("Riyadh, Saudi Arabia")
  
  updatedAt             DateTime @updatedAt
}

model Review {
  id          String   @id @default(cuid())
  productId   String
  userId      String
  orderId     String
  rating      Int      // 1-5 stars
  comment     String
  createdAt   DateTime @default(now())
  
  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  // One review per user per product per order
  @@unique([productId, userId, orderId])
}

// Unified Notification System
model Notification {
  id          String   @id @default(cuid())
  userId      String?  // null for system-wide notifications
  type        String   // 'order_created', 'order_shipped', 'low_stock', etc.
  title_en    String
  title_ar    String
  message_en  String
  message_ar  String
  actionUrl   String?
  
  // Channel delivery flags
  sendEmail   Boolean  @default(false)
  sendInApp   Boolean  @default(true)
  
  // Status tracking
  isRead      Boolean  @default(false)
  emailSent   Boolean  @default(false)
  emailSentAt DateTime?
  
  // Priority and metadata
  priority    String   @default("normal") // 'low', 'normal', 'high'
  metadata    Json?    // Order ID, product info, etc.
  expiresAt   DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isRead])
  @@index([type, createdAt])
}

// Enhanced notification preferences (extend existing)
model NotificationPreferences {
  id                String  @id @default(cuid())
  userId            String  @unique
  
  // Email preferences  
  emailOrders       Boolean @default(true)
  emailPromotions   Boolean @default(false)
  emailSystem       Boolean @default(true)
  
  // In-app preferences
  inAppOrders       Boolean @default(true)
  inAppPromotions   Boolean @default(true)
  inAppSystem       Boolean @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
