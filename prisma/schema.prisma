generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Inventory {
  id             String   @id @default(cuid())
  productId      String   @unique
  stock          Int      @default(0)
  stockThreshold Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model StockHistory {
  id        String   @id @default(cuid())
  change    Int
  reason    String?
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id              String      @id @default(cuid())
  customerEmail   String
  customerName    String
  status          String      @default("pending") // pending, processing, shipped, delivered, cancelled
  subtotal        Float
  tax             Float       @default(0)
  shipping        Float       @default(0)
  total           Float
  billingAddress  Json
  shippingAddress Json
  paymentMethod   String
  trackingNumber  String?
  trackingProvider String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  items           OrderItem[]
}

model OrderItem {
  id                String   @id @default(cuid())
  orderId           String
  productId         String
  quantity          Int
  price             Float
  total             Float
  selectedAttributes Json?
  order             Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product           Product  @relation(fields: [productId], references: [id])
}

model Category {
  id        String    @id @default(cuid())
  slug      String    @unique
  name_en   String
  name_ar   String
  icon      String?
  createdAt DateTime  @default(now())
  products  Product[]
}

model Product {
  id             String             @id @default(cuid())
  slug           String             @unique
  name_en        String
  name_ar        String
  description_en String?
  description_ar String?
  image          String
  price          Float
  inStock        Boolean            @default(true)
  rating         Float?             @default(0)
  reviews        Int?               @default(0)
  categoryId     String
  createdAt      DateTime           @default(now())
  inventory      Inventory?
  category       Category           @relation(fields: [categoryId], references: [id])
  attributes     ProductAttribute[]
  variants       ProductVariant[]
  stockHistory   StockHistory[]
  orderItems     OrderItem[]
}

model ProductVariant {
  id              String   @id @default(cuid())
  productId       String
  sku             String?
  price           Float?
  image           String?
  inStock         Boolean  @default(true)
  stockQuantity   Int      @default(0)
  attributeValues Json?
  createdAt       DateTime @default(now())
  product         Product  @relation(fields: [productId], references: [id])
}

model ProductAttribute {
  id        String           @id @default(cuid())
  productId String
  name      String
  type      String
  values    AttributeValue[]
  product   Product          @relation(fields: [productId], references: [id])
}

model AttributeValue {
  id            String           @id @default(cuid())
  attributeId   String
  value         String
  label         String?
  hexColor      String?
  priceModifier Float?
  inStock       Boolean          @default(true)
  imageUrl      String?
  attribute     ProductAttribute @relation(fields: [attributeId], references: [id])
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?
  isGuest       Boolean   @default(false)
  role          String    @default("viewer")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
