"use client";

import { useState, useEffect } from 'react';
import { MultilingualCategory, LocalizedContent } from '@/types';
import { Button } from '@/components/ui/Button';
import { useLanguage } from '@/contexts/LanguageContext';

interface MultilingualCategoryModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (category: MultilingualCategory) => void;
  category: MultilingualCategory | null;
  parentCategory?: { id: string; name: { en: string; ar: string }; slug: string };
  allCategories?: MultilingualCategory[];
}

export function MultilingualCategoryModal({
  isOpen,
  onClose,
  onSave,
  category,
  parentCategory,
  allCategories = [],
}: MultilingualCategoryModalProps) {
  const { t, isRTL } = useLanguage();
  const [formData, setFormData] = useState<MultilingualCategory>({
    id: '',
    name: { en: '', ar: '' },
    slug: '',
    description: { en: '', ar: '' },
    icon: '',
    parentId: parentCategory?.id || '',
    isActive: true,
    sortOrder: 1
  });
  const [showEmojiGrid, setShowEmojiGrid] = useState(false);

  useEffect(() => {
    if (category) {
      setFormData({
        ...category,
        name: {
          en: category.name?.en || (category as any).name_en || '',
          ar: category.name?.ar || (category as any).name_ar || ''
        },
        description: {
          en: category.description?.en || (category as any).description_en || '',
          ar: category.description?.ar || (category as any).description_ar || ''
        }
      });
    } else {
      setFormData({
        id: '',
        name: { en: '', ar: '' },
        slug: '',
        description: { en: '', ar: '' },
        icon: '',
        parentId: parentCategory?.id || '',
        isActive: true,
        sortOrder: 1
      });
    }
  }, [category]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // For new categories, don't require ID (database will generate it)
    if (formData.name.en && formData.name.ar && formData.slug) {
      onSave(formData);
    }
  };

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement>,
    field?: keyof LocalizedContent,
  ) => {
    const { name, value } = e.target;

    if (name === 'name.en' || name === 'name.ar') {
      const language = name.split('.')[1] as keyof LocalizedContent;
      setFormData((prev) => ({
        ...prev,
        name: {
          ...prev.name,
          [language]: value,
        },
      }));
      
      // Auto-generate slug from English name
      if (name === 'name.en') {
        const slug = value.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
        setFormData((prev) => ({
          ...prev,
          slug,
        }));
      }
      
      // ID will be generated by the database for new categories
    } else {
      setFormData((prev) => ({
        ...prev,
        [name]: value,
      }));
    }
  };

  if (!isOpen) return null;

  // Deduplicated emoji list for category icons
  const categoryEmojis = Array.from(new Set([
    '📱','👕','🏠','⚽','📚','💄','🧸','🚗','🍽️','🏥','🎨','🎮','👶','🐕','🏃','🎵','🎬','🛠️','🌱','🏷️',
    '🛒','🧃','🧁','🍔','🍕','🍎','🥦','🥩','🍩','🍫','🍦','🍰','🍟','🍿','🥤','🍺','🍷','🍵','☕','🥚',
    '🧀','🥖','🥨','🥗','🍜','🍣','🍤','🍱','🍛','🍚','🍙','🍘','🍥','🥮','🍢','🍡','🍧','🍨','🍰',
    '🧂','🥫','🥡','🥢','🧊','🥄','🍴','🧸','🎲','🎯','🎳','🎮','🎰','🧩','🪀','🪁','🛹',
    '🚲','🛴','🛵','🚗','🚕','🚙','🚌','🚎','🏎️','🚓','🚑','🚒','🚚','🚛','🚜','🛺','🚁','✈️','🛩️','🚀',
    '🛸','🚢','⛴️','🛥️','🚤','🛶','⛵','🚂','🚆','🚇','🚊','🚉','🚝','🚞','��','🚍','🚐','🏍️','🦽','🦼','🛹',
    '🛴','🛶','🛥️','🚤','⛵','🚢','✈️','🛩️','🚁','🚟','🚠','🚡','🛰️','🛳️','⚓','⛽','🚧','🚦','🚥','🚏','🗺️','🗿','🗽','🗼','🏰','🏯','🏟️','🎡','🎢','🎠','⛲',
    '⛺','🌁','🌃','🏙️','🌄','🌅','🌆','🌇','🌉','🏞️','🏜️','🏝️','🏖️','🏗️','🏘️','🏚️','🏠','🏡','🏢','🏣',
    '🏤','🏥','🏦','🏨','🏩','🏪','🏫','🏬','🏭','🏯','🏰','💒','🗼','🗽','⛪','🕌','🛕','🕍','⛩️','🕋','⛲',
    '💡','🔦','🕯️','🛋️','🛏️','🛌','🪑','🚪','🚽','🚿','🛁','🪒','🧴','🧷','🧹','🧺','🧻','🪣','🧼',
    '🪥','🧽','🧯','🚬','⚰️','⚱️','🗿','🪦'
  ]));

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
      <div className="relative top-20 mx-auto p-5 border w-full max-w-md bg-white dark:bg-gray-800 rounded-lg shadow-lg">
        <div className="flex items-center justify-between pb-4 border-b border-gray-200 dark:border-gray-700">
          <h3 className="text-lg font-medium text-gray-900 dark:text-white">
            {category ? 'Edit Category' : 'Add Category'}
            {parentCategory && (
              <span className="block text-sm font-normal text-gray-500 dark:text-gray-400">
                under "{parentCategory.name.en}"
              </span>
            )}
          </h3>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
          >
            <span className="sr-only">Close</span>
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <form onSubmit={handleSubmit} className="mt-4 space-y-4">
          {/* Category Icon Selection */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Category Icon
            </label>
            <button
              type="button"
              className="mb-2 px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-600 transition"
              onClick={() => setShowEmojiGrid(v => !v)}
            >
              {showEmojiGrid ? 'Hide Emoji Picker' : 'Show Emoji Picker'}
            </button>
            {showEmojiGrid && (
              <div className="flex flex-wrap gap-2 mb-2 max-h-40 overflow-y-auto border p-2 rounded bg-gray-50 dark:bg-gray-900">
                {categoryEmojis.map((icon) => (
                  <button
                    type="button"
                    key={icon}
                    className={`text-2xl p-1 rounded border transition-colors ${formData.icon === icon ? 'border-blue-500 bg-blue-100 dark:bg-blue-900' : 'border-transparent hover:border-gray-300 dark:hover:border-gray-600'}`}
                    onClick={() => setFormData((prev) => ({ ...prev, icon }))}
                    aria-label={`Select icon ${icon}`}
                  >
                    {icon}
                  </button>
                ))}
              </div>
            )}
            {formData.icon && (
              <div className="text-sm text-gray-500 dark:text-gray-400 mb-2">
                Selected: <span className="text-xl">{formData.icon}</span>
              </div>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Name (English)
            </label>
            <input
              type="text"
              name="name.en"
              value={formData.name.en}
              onChange={(e) => handleInputChange(e, 'en')}
              required
              className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Name (Arabic)
            </label>
            <input
              type="text"
              name="name.ar"
              value={formData.name.ar}
              onChange={(e) => handleInputChange(e, 'ar')}
              required
              className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            />
          </div>

          {/* Only show ID field for existing categories */}
          {category && (
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Category ID
              </label>
              <input
                type="text"
                name="id"
                value={formData.id}
                disabled={true}
                className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white disabled:opacity-50"
              />
              <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                Category ID cannot be changed
              </p>
            </div>
          )}
          
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Slug
            </label>
            <input
              type="text"
              name="slug"
              value={formData.slug}
              onChange={(e) => handleInputChange(e, 'en')}
              required
              className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            />
            <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
              Slug should be unique and URL-friendly.
            </p>
          </div>

          {/* Parent Category Selection */}
          {!parentCategory && (
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Parent Category (Optional)
              </label>
              <select
                name="parentId"
                value={formData.parentId || ''}
                onChange={(e) => setFormData(prev => ({ ...prev, parentId: e.target.value || undefined }))}
                className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
              >
                <option value="">-- No Parent (Root Category) --</option>
                {allCategories
                  .filter(cat => cat.id !== category?.id) // Prevent selecting self as parent
                  .map(cat => (
                    <option key={cat.id} value={cat.id}>
                      {cat.name.en} ({cat.name.ar})
                    </option>
                  ))
                }
              </select>
              <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                Select a parent category to create a subcategory.
              </p>
            </div>
          )}

          {/* Status and Sort Order */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="flex items-center">
                <input
                  type="checkbox"
                  name="isActive"
                  checked={formData.isActive ?? true}
                  onChange={(e) => setFormData(prev => ({ ...prev, isActive: e.target.checked }))}
                  className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span className="ml-2 text-sm font-medium text-gray-700 dark:text-gray-300">
                  Active
                </span>
              </label>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Sort Order
              </label>
              <input
                type="number"
                name="sortOrder"
                value={formData.sortOrder || 1}
                onChange={(e) => setFormData(prev => ({ ...prev, sortOrder: parseInt(e.target.value) || 1 }))}
                min="1"
                className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
              />
            </div>
          </div>

          <div className={`flex space-x-4 pt-4`}>
            <Button
              type="submit"
              className="bg-blue-600 hover:bg-blue-700 text-white"
            >
              Save
            </Button>
            <Button
              type="button"
              variant="outline"
              onClick={onClose}
            >
              Cancel
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
}
